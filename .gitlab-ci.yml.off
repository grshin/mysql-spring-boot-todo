stages:
  - test
  - build
  - package
  - deploy
  - dast

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE/todo:$CI_PIPELINE_ID
  NAME_SPACE: "default"
  CODE_QUALITY_DISABLED: "true"
  DAST_DISABLED: "true"

setup:
  stage: test
  script:
    - echo $CI_JOB_STAGE
    - echo $IMAGE_NAME
    - env

code_quality:
  stage: test
  image: docker:stable
  allow_failure: true
  services:
    - docker:dind
  #variables:
  #  DOCKER_HOST: tcp://docker:2375/
  #  DOCKER_DRIVER: overlay2
  script:
    - docker login -u grshin -p $DOCKER_HUB_PASSWORD
    - >
      docker run --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.10 /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
  only:
    - branches
  except:
    variables:
      - $CODE_QUALITY_DISABLED

maven_build:
  stage: build
  image: maven:3.8.3-jdk-11-slim
  script:
    - echo $CI_JOB_STAGE
    - mvn clean package
    #- ls -lah
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week

docker_build:
  stage: package
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - echo $CI_JOB_STAGE
    #- echo $CI_REGISTRY
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY # user "gitlab-ci-token" is automatically created by GitLab
    - docker info
  script:
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME
    - docker rmi $IMAGE_NAME
  artifacts:
    paths:
      - manifests/k8s
    expire_in: 1 week

k8s_deploy:
  stage: deploy
  environment:
    name: production
    url: http://api.learnk8s.net:8080/
  image:
    name: grshin/kubectl:1.21.7
    #name: ccll/kubectl:1.19
    entrypoint: [""]
  before_script:
    - echo $CI_JOB_STAGE
    - kubectl version
  script:
    - kubectl get ns
    - kubectl config set-context --current --namespace=$NAME_SPACE
    #- kubectl config view --minify | grep namespace # Validate Namesapce
    #- kubectl config view
    #- kubectl delete --ignore-not-found=true secret learnk8s.net
    - kubectl get secret learnk8s.net -n $NAME_SPACE || kubectl create secret docker-registry learnk8s.net --docker-server=$CI_REGISTRY --docker-username=$DOCKER_TOKEN_ID --docker-password=$DOCKER_TOKEN_PASSWORD  -n $NAME_SPACE
    - kubectl apply -f ./manifests/k8s/01-todo-config.yml -n $NAME_SPACE
    - kubectl apply -f ./manifests/k8s/02-todo-mysql-local.yml -n $NAME_SPACE
    - envsubst < ./manifests/k8s/03-todo-deployment.yml | kubectl apply -n $NAME_SPACE -f -
    # - envsubst < ./manifests/k8s/03-todo-deployment.yml > ./manifests/k8s/03-todo-deployment_temp.yml
    # - cat ./manifests/k8s/03-todo-deployment_temp.yml
    - kubectl apply -f ./manifests/k8s/04-todo-service.yml -n $NAME_SPACE

dast:
  stage: dast
  image: registry.gitlab.com/gitlab-org/security-products/zaproxy
  variables:
    website: "http://api.learnk8s.net:8080/"
  allow_failure: true
  script:
    - mkdir /zap/wrk/
    - /zap/zap-baseline.py -J gl-dast-report.json -t $website || true
    - cp /zap/wrk/gl-dast-report.json .
  artifacts:
    reports:
      dast: gl-dast-report.json
  except:
    variables:
      - $DAST_DISABLED

dast-review:
  stage: dast
  image: registry.gitlab.com/gitlab-org/security-products/zaproxy
  variables:
    website: http://${CI_COMMIT_REF_SLUG}-api.learnk8s.net/
  allow_failure: true
  script:
    - mkdir /zap/wrk/
    - /zap/zap-baseline.py -J gl-dast-report.json -t $website || true
    - cp /zap/wrk/gl-dast-report.json .
  artifacts:
    reports:
      dast: gl-dast-report.json
  except:
    variables:
      - $DAST_DISABLED