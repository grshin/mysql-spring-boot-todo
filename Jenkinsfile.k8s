/* Jenkinsfiel.k8s\
   필요한 Plugins
   - Maven Integration
   - SonarQube Scanner
   - Docker Pipeline
   - Kubernetes CLI
*/

pipeline {
  agent any
  environment {
    registry = "https://reg.learnk8s.net/dev/mysql-spring-boot-todo"
    imageTag = "reg.learnk8s.net/dev/mysql-spring-boot-todo/todo"
    registryCredential = 'gitlab-token'
    NAMESPACE = "default"
    VERSION = "${BUILD_NUMBER}"
  }
  tools {
    maven "maven 3.8.4"
    jdk "docker-java-11"
  }
  stages {
    stage ('Initialize') {
      steps {
        script {
          sh '''
            mvn --version
            envsubst --version
            echo "PATH = ${PATH}"
            echo "VERSION = $VERSION"
          '''
        }
      }
    }
    stage ('Maven Build & SonarQube') {
      steps {
        sh "mvn clean package"
        withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName: 'SonarServer') {
          sh 'mvn sonar:sonar'
        }
      }
    }
    stage('Docker Build & Push') {
      steps{
        script {
          dockerImage = docker.build (imageTag+ ":$VERSION")
          docker.withRegistry( registry, registryCredential ) {
            dockerImage.push("$VERSION")
            //dockerImage.push("latest")
          }          
        }
        sh "docker rmi $imageTag:$VERSION"
      }
    }
    stage("K8s Deploy") {
      steps {
        withKubeConfig([ credentialsId: 'dev-aks', serverUrl: 'dev-aks-dns-937fa24f.hcp.koreacentral.azmk8s.io', contextName: 'dev-aks', clusterName: 'dev-aks' ]) {
          // namespace 존재여부 확인. 미존재시 namespace 생성
          sh "kubectl get namespace $NAMESPACE|| kubectl create namespace $NAMESPACE"

          // secret 존재여부 확인. 미존재시 secret 생성
          sh '''
             kubectl get secret regcred -n $NAMESPACE || \
             kubectl create secret docker-registry regcred \
                --docker-server=$registry \
                --docker-username=$USERNAME \
                --docker-password=$PASSWORD \
                --docker-email=grshin@sptek.co.kr \
                -n $NAMESPACE
             '''
          // yaml파일로 배포를 수행한다
          sh '''
             kubectl apply -f manifests/k8s/01-todo-config.yml -n $NAMESPACE
             kubectl apply -f manifests/k8s/02-todo-mysql-local.yml -n $NAMESPACE
             envsubst < manifests/k8s/03-todo-deployment.yml | kubectl apply -n $NAMESPACE -f -
             '''
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}
