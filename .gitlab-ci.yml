stages:
  - setup
  - build
  - deploy


variables:
  #IMAGE_NAME: reg.learnk8s.net/dev/mysql-spring-boot-todo/todo:latest
  IMAGE_NAME: $CI_REGISTRY_IMAGE/todo:latest
  #IMAGE_NAME_VER: reg.learnk8s.net/dev/mysql-spring-boot-todo/todo:v${CI_PIPELINE_IID}
  IMAGE_NAME_VER: $CI_REGISTRY_IMAGE/todo:v$CI_PIPELINE_IID

cache:
  paths:
    - .m2/repository

setup:
  stage: setup
  script:
    - echo "$CI_JOB_STAGE"
    - echo "$IMAGE_NAME"
    - echo "$IMAGE_NAME_VER"
    #- export temp=$(docker images -f dangling=true -q)
    #- echo "$temp"
    #- if ["$temp" !="" ]; then docker rmi -f "$(docker images -f 'dangling=true' -q)"; else docker image prune -f; fi
    # - env

build:
  stage: build
  script:
    - echo "$CI_JOB_STAGE"
    - mvn clean package
    - ls -lah
    - docker info
    - docker login reg.learnk8s.net -u "$DOCKER_TOKEN_ID" -p "$DOCKER_TOKEN_PASSWORD"
    - docker build -t "$IMAGE_NAME" .
    - docker build -t "$IMAGE_NAME_VER" .
    - docker push "$IMAGE_NAME"
    - docker push "$IMAGE_NAME_VER"
    - docker rmi "$IMAGE_NAME_VER"
    - export temp=$(docker images -f dangling=true -q)
    - echo "$temp"
    - if ["$temp" !="" ]; then docker rmi -f "$(docker images -f 'dangling=true' -q)"; else docker image prune -f; fi

deploy:
  stage: deploy
  script:
    - echo "$CI_JOB_STAGE"
    - docker-compose -f docker-compose.yml down
    - docker-compose -f docker-compose.yml up -d
